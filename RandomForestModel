{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f0e5e220",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:31.798603Z",
     "iopub.status.busy": "2025-07-05T04:02:31.798281Z",
     "iopub.status.idle": "2025-07-05T04:02:34.017709Z",
     "shell.execute_reply": "2025-07-05T04:02:34.015969Z"
    },
    "papermill": {
     "duration": 2.229446,
     "end_time": "2025-07-05T04:02:34.019758",
     "exception": false,
     "start_time": "2025-07-05T04:02:31.790312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e7/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e7/train.csv\n",
      "/kaggle/input/playground-series-s5e7/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fdcbe297",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:34.036512Z",
     "iopub.status.busy": "2025-07-05T04:02:34.036074Z",
     "iopub.status.idle": "2025-07-05T04:02:37.118220Z",
     "shell.execute_reply": "2025-07-05T04:02:37.117052Z"
    },
    "papermill": {
     "duration": 3.093262,
     "end_time": "2025-07-05T04:02:37.120136",
     "exception": false,
     "start_time": "2025-07-05T04:02:34.026874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "526da69a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:37.135973Z",
     "iopub.status.busy": "2025-07-05T04:02:37.135498Z",
     "iopub.status.idle": "2025-07-05T04:02:37.202663Z",
     "shell.execute_reply": "2025-07-05T04:02:37.201046Z"
    },
    "papermill": {
     "duration": 0.078298,
     "end_time": "2025-07-05T04:02:37.204687",
     "exception": false,
     "start_time": "2025-07-05T04:02:37.126389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('/kaggle/input/playground-series-s5e7/train.csv')\n",
    "test = pd.read_csv('/kaggle/input/playground-series-s5e7/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a264f967",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:37.220008Z",
     "iopub.status.busy": "2025-07-05T04:02:37.219631Z",
     "iopub.status.idle": "2025-07-05T04:02:37.261339Z",
     "shell.execute_reply": "2025-07-05T04:02:37.259416Z"
    },
    "papermill": {
     "duration": 0.051646,
     "end_time": "2025-07-05T04:02:37.263296",
     "exception": false,
     "start_time": "2025-07-05T04:02:37.211650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Time_spent_Alone</th>\n",
       "      <th>Stage_fear</th>\n",
       "      <th>Social_event_attendance</th>\n",
       "      <th>Going_outside</th>\n",
       "      <th>Drained_after_socializing</th>\n",
       "      <th>Friends_circle_size</th>\n",
       "      <th>Post_frequency</th>\n",
       "      <th>Personality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>No</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>No</td>\n",
       "      <td>15.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Extrovert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>No</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>Extrovert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Introvert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No</td>\n",
       "      <td>11.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Extrovert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>No</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>No</td>\n",
       "      <td>13.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Extrovert</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  Time_spent_Alone Stage_fear  Social_event_attendance  Going_outside  \\\n",
       "0   0               0.0         No                      6.0            4.0   \n",
       "1   1               1.0         No                      7.0            3.0   \n",
       "2   2               6.0        Yes                      1.0            0.0   \n",
       "3   3               3.0         No                      7.0            3.0   \n",
       "4   4               1.0         No                      4.0            4.0   \n",
       "\n",
       "  Drained_after_socializing  Friends_circle_size  Post_frequency Personality  \n",
       "0                        No                 15.0             5.0   Extrovert  \n",
       "1                        No                 10.0             8.0   Extrovert  \n",
       "2                       NaN                  3.0             0.0   Introvert  \n",
       "3                        No                 11.0             5.0   Extrovert  \n",
       "4                        No                 13.0             NaN   Extrovert  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0ac38af4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:37.280556Z",
     "iopub.status.busy": "2025-07-05T04:02:37.280042Z",
     "iopub.status.idle": "2025-07-05T04:02:37.299744Z",
     "shell.execute_reply": "2025-07-05T04:02:37.298427Z"
    },
    "papermill": {
     "duration": 0.032572,
     "end_time": "2025-07-05T04:02:37.302387",
     "exception": false,
     "start_time": "2025-07-05T04:02:37.269815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Time_spent_Alone</th>\n",
       "      <th>Stage_fear</th>\n",
       "      <th>Social_event_attendance</th>\n",
       "      <th>Going_outside</th>\n",
       "      <th>Drained_after_socializing</th>\n",
       "      <th>Friends_circle_size</th>\n",
       "      <th>Post_frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18524</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>No</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18525</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18526</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>No</td>\n",
       "      <td>15.0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18527</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>No</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>18528</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  Time_spent_Alone Stage_fear  Social_event_attendance  Going_outside  \\\n",
       "0  18524               3.0         No                      7.0            4.0   \n",
       "1  18525               NaN        Yes                      0.0            0.0   \n",
       "2  18526               3.0         No                      5.0            6.0   \n",
       "3  18527               3.0         No                      4.0            4.0   \n",
       "4  18528               9.0        Yes                      1.0            2.0   \n",
       "\n",
       "  Drained_after_socializing  Friends_circle_size  Post_frequency  \n",
       "0                        No                  6.0             NaN  \n",
       "1                       Yes                  5.0             1.0  \n",
       "2                        No                 15.0             9.0  \n",
       "3                        No                  5.0             6.0  \n",
       "4                       Yes                  1.0             1.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "481fe3e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:37.319099Z",
     "iopub.status.busy": "2025-07-05T04:02:37.318700Z",
     "iopub.status.idle": "2025-07-05T04:02:37.351331Z",
     "shell.execute_reply": "2025-07-05T04:02:37.349634Z"
    },
    "papermill": {
     "duration": 0.04276,
     "end_time": "2025-07-05T04:02:37.353577",
     "exception": false,
     "start_time": "2025-07-05T04:02:37.310817",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 18524 entries, 0 to 18523\n",
      "Data columns (total 9 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   id                         18524 non-null  int64  \n",
      " 1   Time_spent_Alone           17334 non-null  float64\n",
      " 2   Stage_fear                 16631 non-null  object \n",
      " 3   Social_event_attendance    17344 non-null  float64\n",
      " 4   Going_outside              17058 non-null  float64\n",
      " 5   Drained_after_socializing  17375 non-null  object \n",
      " 6   Friends_circle_size        17470 non-null  float64\n",
      " 7   Post_frequency             17260 non-null  float64\n",
      " 8   Personality                18524 non-null  object \n",
      "dtypes: float64(5), int64(1), object(3)\n",
      "memory usage: 1.3+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "008152a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:37.369494Z",
     "iopub.status.busy": "2025-07-05T04:02:37.368805Z",
     "iopub.status.idle": "2025-07-05T04:02:37.381071Z",
     "shell.execute_reply": "2025-07-05T04:02:37.379925Z"
    },
    "papermill": {
     "duration": 0.022185,
     "end_time": "2025-07-05T04:02:37.382685",
     "exception": false,
     "start_time": "2025-07-05T04:02:37.360500",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6175 entries, 0 to 6174\n",
      "Data columns (total 8 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   id                         6175 non-null   int64  \n",
      " 1   Time_spent_Alone           5750 non-null   float64\n",
      " 2   Stage_fear                 5577 non-null   object \n",
      " 3   Social_event_attendance    5778 non-null   float64\n",
      " 4   Going_outside              5709 non-null   float64\n",
      " 5   Drained_after_socializing  5743 non-null   object \n",
      " 6   Friends_circle_size        5825 non-null   float64\n",
      " 7   Post_frequency             5767 non-null   float64\n",
      "dtypes: float64(5), int64(1), object(2)\n",
      "memory usage: 386.1+ KB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6e13de19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:37.398586Z",
     "iopub.status.busy": "2025-07-05T04:02:37.398268Z",
     "iopub.status.idle": "2025-07-05T04:02:37.427157Z",
     "shell.execute_reply": "2025-07-05T04:02:37.426044Z"
    },
    "papermill": {
     "duration": 0.038885,
     "end_time": "2025-07-05T04:02:37.429108",
     "exception": false,
     "start_time": "2025-07-05T04:02:37.390223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Personality\n",
       "Extrovert    13699\n",
       "Introvert     4825\n",
       "Name: count, dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Time_spent_Alone</th>\n",
       "      <th>Social_event_attendance</th>\n",
       "      <th>Going_outside</th>\n",
       "      <th>Friends_circle_size</th>\n",
       "      <th>Post_frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.000004</td>\n",
       "      <td>0.002750</td>\n",
       "      <td>0.004460</td>\n",
       "      <td>0.004340</td>\n",
       "      <td>-0.001945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Time_spent_Alone</th>\n",
       "      <td>-0.000004</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.628806</td>\n",
       "      <td>-0.640884</td>\n",
       "      <td>-0.598014</td>\n",
       "      <td>-0.611544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Social_event_attendance</th>\n",
       "      <td>0.002750</td>\n",
       "      <td>-0.628806</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.585224</td>\n",
       "      <td>0.566675</td>\n",
       "      <td>0.566679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Going_outside</th>\n",
       "      <td>0.004460</td>\n",
       "      <td>-0.640884</td>\n",
       "      <td>0.585224</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.549864</td>\n",
       "      <td>0.579305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Friends_circle_size</th>\n",
       "      <td>0.004340</td>\n",
       "      <td>-0.598014</td>\n",
       "      <td>0.566675</td>\n",
       "      <td>0.549864</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.522272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Post_frequency</th>\n",
       "      <td>-0.001945</td>\n",
       "      <td>-0.611544</td>\n",
       "      <td>0.566679</td>\n",
       "      <td>0.579305</td>\n",
       "      <td>0.522272</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               id  Time_spent_Alone  Social_event_attendance  \\\n",
       "id                       1.000000         -0.000004                 0.002750   \n",
       "Time_spent_Alone        -0.000004          1.000000                -0.628806   \n",
       "Social_event_attendance  0.002750         -0.628806                 1.000000   \n",
       "Going_outside            0.004460         -0.640884                 0.585224   \n",
       "Friends_circle_size      0.004340         -0.598014                 0.566675   \n",
       "Post_frequency          -0.001945         -0.611544                 0.566679   \n",
       "\n",
       "                         Going_outside  Friends_circle_size  Post_frequency  \n",
       "id                            0.004460             0.004340       -0.001945  \n",
       "Time_spent_Alone             -0.640884            -0.598014       -0.611544  \n",
       "Social_event_attendance       0.585224             0.566675        0.566679  \n",
       "Going_outside                 1.000000             0.549864        0.579305  \n",
       "Friends_circle_size           0.549864             1.000000        0.522272  \n",
       "Post_frequency                0.579305             0.522272        1.000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(train['Personality'].value_counts())\n",
    "\n",
    "numerical_cols = train.select_dtypes(include=['float64', 'int64']).columns\n",
    "correlation_matrix = train[numerical_cols].corr()\n",
    "display(correlation_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "30670c52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:37.445521Z",
     "iopub.status.busy": "2025-07-05T04:02:37.445199Z",
     "iopub.status.idle": "2025-07-05T04:02:38.909113Z",
     "shell.execute_reply": "2025-07-05T04:02:38.907266Z"
    },
    "papermill": {
     "duration": 1.475046,
     "end_time": "2025-07-05T04:02:38.911389",
     "exception": false,
     "start_time": "2025-07-05T04:02:37.436343",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x1000 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train[numerical_cols].hist(figsize=(15, 10))\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ea35d6e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:38.931170Z",
     "iopub.status.busy": "2025-07-05T04:02:38.929634Z",
     "iopub.status.idle": "2025-07-05T04:02:39.313333Z",
     "shell.execute_reply": "2025-07-05T04:02:39.310509Z"
    },
    "papermill": {
     "duration": 0.395404,
     "end_time": "2025-07-05T04:02:39.315385",
     "exception": false,
     "start_time": "2025-07-05T04:02:38.919981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "categorical_cols = train.select_dtypes(include=['object']).columns\n",
    "for col in categorical_cols:\n",
    "    if col != 'Personality': # Exclude the target variable\n",
    "        plt.figure(figsize=(8, 5))\n",
    "        sns.countplot(data=train, x=col)\n",
    "        plt.title(f'Distribution of {col}')\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a3691b5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.337260Z",
     "iopub.status.busy": "2025-07-05T04:02:39.336898Z",
     "iopub.status.idle": "2025-07-05T04:02:39.348430Z",
     "shell.execute_reply": "2025-07-05T04:02:39.347220Z"
    },
    "papermill": {
     "duration": 0.023779,
     "end_time": "2025-07-05T04:02:39.350036",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.326257",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values in train dataset:\n",
      "Time_spent_Alone             1190\n",
      "Stage_fear                   1893\n",
      "Social_event_attendance      1180\n",
      "Going_outside                1466\n",
      "Drained_after_socializing    1149\n",
      "Friends_circle_size          1054\n",
      "Post_frequency               1264\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "missing_train = train.isnull().sum()\n",
    "missing_train = missing_train[missing_train > 0]\n",
    "print(\"Missing values in train dataset:\")\n",
    "print(missing_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "583a69aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.371049Z",
     "iopub.status.busy": "2025-07-05T04:02:39.370685Z",
     "iopub.status.idle": "2025-07-05T04:02:39.380630Z",
     "shell.execute_reply": "2025-07-05T04:02:39.379414Z"
    },
    "papermill": {
     "duration": 0.022151,
     "end_time": "2025-07-05T04:02:39.382349",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.360198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Missing values in test dataset:\n",
      "Time_spent_Alone             425\n",
      "Stage_fear                   598\n",
      "Social_event_attendance      397\n",
      "Going_outside                466\n",
      "Drained_after_socializing    432\n",
      "Friends_circle_size          350\n",
      "Post_frequency               408\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "missing_test = test.isnull().sum()\n",
    "missing_test = missing_test[missing_test > 0]\n",
    "print(\"\\nMissing values in test dataset:\")\n",
    "print(missing_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3e386780",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.402957Z",
     "iopub.status.busy": "2025-07-05T04:02:39.402574Z",
     "iopub.status.idle": "2025-07-05T04:02:39.416525Z",
     "shell.execute_reply": "2025-07-05T04:02:39.415114Z"
    },
    "papermill": {
     "duration": 0.026639,
     "end_time": "2025-07-05T04:02:39.418250",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.391611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_13/2106220324.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  train[col].fillna(train[col].median(), inplace=True)\n",
      "/tmp/ipykernel_13/2106220324.py:5: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  test[col].fillna(test[col].median(), inplace=True)\n"
     ]
    }
   ],
   "source": [
    "# Impute numerical columns with the median\n",
    "numerical_cols = ['Time_spent_Alone', 'Social_event_attendance', 'Going_outside', 'Friends_circle_size', 'Post_frequency']\n",
    "for col in numerical_cols:\n",
    "    train[col].fillna(train[col].median(), inplace=True)\n",
    "    test[col].fillna(test[col].median(), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b2aecc7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.439015Z",
     "iopub.status.busy": "2025-07-05T04:02:39.438656Z",
     "iopub.status.idle": "2025-07-05T04:02:39.456020Z",
     "shell.execute_reply": "2025-07-05T04:02:39.454281Z"
    },
    "papermill": {
     "duration": 0.029779,
     "end_time": "2025-07-05T04:02:39.457893",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.428114",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_13/1887970830.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  train[col].fillna(train[col].mode()[0], inplace=True)\n",
      "/tmp/ipykernel_13/1887970830.py:5: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  test[col].fillna(test[col].mode()[0], inplace=True)\n"
     ]
    }
   ],
   "source": [
    "# Impute categorical columns with the mode\n",
    "categorical_cols = ['Stage_fear', 'Drained_after_socializing']\n",
    "for col in categorical_cols:\n",
    "    train[col].fillna(train[col].mode()[0], inplace=True)\n",
    "    test[col].fillna(test[col].mode()[0], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0d1519f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.479759Z",
     "iopub.status.busy": "2025-07-05T04:02:39.479415Z",
     "iopub.status.idle": "2025-07-05T04:02:39.495203Z",
     "shell.execute_reply": "2025-07-05T04:02:39.493355Z"
    },
    "papermill": {
     "duration": 0.029821,
     "end_time": "2025-07-05T04:02:39.497098",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.467277",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Missing values in train dataset after imputation:\n",
      "Series([], dtype: int64)\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nMissing values in train dataset after imputation:\")\n",
    "print(train.isnull().sum()[train.isnull().sum() > 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e7c119a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.518422Z",
     "iopub.status.busy": "2025-07-05T04:02:39.517757Z",
     "iopub.status.idle": "2025-07-05T04:02:39.529746Z",
     "shell.execute_reply": "2025-07-05T04:02:39.527675Z"
    },
    "papermill": {
     "duration": 0.024676,
     "end_time": "2025-07-05T04:02:39.531889",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.507213",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Missing values in test dataset after imputation:\n",
      "Series([], dtype: int64)\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nMissing values in test dataset after imputation:\")\n",
    "print(test.isnull().sum()[test.isnull().sum() > 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d396a222",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.552418Z",
     "iopub.status.busy": "2025-07-05T04:02:39.552096Z",
     "iopub.status.idle": "2025-07-05T04:02:39.557997Z",
     "shell.execute_reply": "2025-07-05T04:02:39.556684Z"
    },
    "papermill": {
     "duration": 0.01848,
     "end_time": "2025-07-05T04:02:39.559894",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.541414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "categorical_features = ['Stage_fear', 'Drained_after_socializing']\n",
    "numerical_features = ['Time_spent_Alone', 'Social_event_attendance', 'Going_outside', 'Friends_circle_size', 'Post_frequency']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d8816866",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.580857Z",
     "iopub.status.busy": "2025-07-05T04:02:39.580531Z",
     "iopub.status.idle": "2025-07-05T04:02:39.585482Z",
     "shell.execute_reply": "2025-07-05T04:02:39.584422Z"
    },
    "papermill": {
     "duration": 0.017732,
     "end_time": "2025-07-05T04:02:39.587311",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.569579",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create preprocessing pipelines for numerical and categorical features\n",
    "numerical_transformer = StandardScaler()\n",
    "categorical_transformer = OneHotEncoder(handle_unknown='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "77788309",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.607893Z",
     "iopub.status.busy": "2025-07-05T04:02:39.607553Z",
     "iopub.status.idle": "2025-07-05T04:02:39.612710Z",
     "shell.execute_reply": "2025-07-05T04:02:39.611705Z"
    },
    "papermill": {
     "duration": 0.017887,
     "end_time": "2025-07-05T04:02:39.614703",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.596816",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create a column transformer to apply different transformations to different columns\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('num', numerical_transformer, numerical_features),\n",
    "        ('cat', categorical_transformer, categorical_features)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9eb1a480",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.635301Z",
     "iopub.status.busy": "2025-07-05T04:02:39.634980Z",
     "iopub.status.idle": "2025-07-05T04:02:39.689680Z",
     "shell.execute_reply": "2025-07-05T04:02:39.687920Z"
    },
    "papermill": {
     "duration": 0.067434,
     "end_time": "2025-07-05T04:02:39.691699",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.624265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Apply the preprocessor to the training data\n",
    "train_processed = preprocessor.fit_transform(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c291a69f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.712377Z",
     "iopub.status.busy": "2025-07-05T04:02:39.712062Z",
     "iopub.status.idle": "2025-07-05T04:02:39.725964Z",
     "shell.execute_reply": "2025-07-05T04:02:39.724878Z"
    },
    "papermill": {
     "duration": 0.026697,
     "end_time": "2025-07-05T04:02:39.728163",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.701466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_processed = preprocessor.transform(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "dc90b65c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.749746Z",
     "iopub.status.busy": "2025-07-05T04:02:39.749451Z",
     "iopub.status.idle": "2025-07-05T04:02:39.754447Z",
     "shell.execute_reply": "2025-07-05T04:02:39.753544Z"
    },
    "papermill": {
     "duration": 0.017126,
     "end_time": "2025-07-05T04:02:39.756294",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.739168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "feature_names = numerical_features + list(preprocessor.named_transformers_['cat'].get_feature_names_out(categorical_features))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "da552e04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.777283Z",
     "iopub.status.busy": "2025-07-05T04:02:39.776923Z",
     "iopub.status.idle": "2025-07-05T04:02:39.782871Z",
     "shell.execute_reply": "2025-07-05T04:02:39.781760Z"
    },
    "papermill": {
     "duration": 0.018739,
     "end_time": "2025-07-05T04:02:39.784730",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.765991",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_processed_df = pd.DataFrame(train_processed, columns=feature_names)\n",
    "test_processed_df = pd.DataFrame(test_processed, columns=feature_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6f87879a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.804953Z",
     "iopub.status.busy": "2025-07-05T04:02:39.804603Z",
     "iopub.status.idle": "2025-07-05T04:02:39.822101Z",
     "shell.execute_reply": "2025-07-05T04:02:39.820820Z"
    },
    "papermill": {
     "duration": 0.029512,
     "end_time": "2025-07-05T04:02:39.823783",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.794271",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time_spent_Alone</th>\n",
       "      <th>Social_event_attendance</th>\n",
       "      <th>Going_outside</th>\n",
       "      <th>Friends_circle_size</th>\n",
       "      <th>Post_frequency</th>\n",
       "      <th>Stage_fear_No</th>\n",
       "      <th>Stage_fear_Yes</th>\n",
       "      <th>Drained_after_socializing_No</th>\n",
       "      <th>Drained_after_socializing_Yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.049913</td>\n",
       "      <td>0.282102</td>\n",
       "      <td>-0.020620</td>\n",
       "      <td>1.707463</td>\n",
       "      <td>0.006002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.707327</td>\n",
       "      <td>0.657346</td>\n",
       "      <td>-0.525859</td>\n",
       "      <td>0.488383</td>\n",
       "      <td>1.085490</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.005601</td>\n",
       "      <td>-1.594120</td>\n",
       "      <td>-2.041578</td>\n",
       "      <td>-1.218331</td>\n",
       "      <td>-1.793144</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.022156</td>\n",
       "      <td>0.657346</td>\n",
       "      <td>-0.525859</td>\n",
       "      <td>0.732199</td>\n",
       "      <td>0.006002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.707327</td>\n",
       "      <td>-0.468387</td>\n",
       "      <td>-0.020620</td>\n",
       "      <td>1.219831</td>\n",
       "      <td>0.006002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Time_spent_Alone  Social_event_attendance  Going_outside  \\\n",
       "0         -1.049913                 0.282102      -0.020620   \n",
       "1         -0.707327                 0.657346      -0.525859   \n",
       "2          1.005601                -1.594120      -2.041578   \n",
       "3         -0.022156                 0.657346      -0.525859   \n",
       "4         -0.707327                -0.468387      -0.020620   \n",
       "\n",
       "   Friends_circle_size  Post_frequency  Stage_fear_No  Stage_fear_Yes  \\\n",
       "0             1.707463        0.006002            1.0             0.0   \n",
       "1             0.488383        1.085490            1.0             0.0   \n",
       "2            -1.218331       -1.793144            0.0             1.0   \n",
       "3             0.732199        0.006002            1.0             0.0   \n",
       "4             1.219831        0.006002            1.0             0.0   \n",
       "\n",
       "   Drained_after_socializing_No  Drained_after_socializing_Yes  \n",
       "0                           1.0                            0.0  \n",
       "1                           1.0                            0.0  \n",
       "2                           1.0                            0.0  \n",
       "3                           1.0                            0.0  \n",
       "4                           1.0                            0.0  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_processed_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ac153047",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.844329Z",
     "iopub.status.busy": "2025-07-05T04:02:39.844004Z",
     "iopub.status.idle": "2025-07-05T04:02:39.858368Z",
     "shell.execute_reply": "2025-07-05T04:02:39.857463Z"
    },
    "papermill": {
     "duration": 0.02688,
     "end_time": "2025-07-05T04:02:39.860308",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.833428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time_spent_Alone</th>\n",
       "      <th>Social_event_attendance</th>\n",
       "      <th>Going_outside</th>\n",
       "      <th>Friends_circle_size</th>\n",
       "      <th>Post_frequency</th>\n",
       "      <th>Stage_fear_No</th>\n",
       "      <th>Stage_fear_Yes</th>\n",
       "      <th>Drained_after_socializing_No</th>\n",
       "      <th>Drained_after_socializing_Yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.022156</td>\n",
       "      <td>0.657346</td>\n",
       "      <td>-0.020620</td>\n",
       "      <td>-0.486882</td>\n",
       "      <td>0.006002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.364742</td>\n",
       "      <td>-1.969365</td>\n",
       "      <td>-2.041578</td>\n",
       "      <td>-0.730698</td>\n",
       "      <td>-1.433314</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.022156</td>\n",
       "      <td>-0.093143</td>\n",
       "      <td>0.989859</td>\n",
       "      <td>1.707463</td>\n",
       "      <td>1.445319</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.022156</td>\n",
       "      <td>-0.468387</td>\n",
       "      <td>-0.020620</td>\n",
       "      <td>-0.730698</td>\n",
       "      <td>0.365832</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.033358</td>\n",
       "      <td>-1.594120</td>\n",
       "      <td>-1.031099</td>\n",
       "      <td>-1.705963</td>\n",
       "      <td>-1.433314</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Time_spent_Alone  Social_event_attendance  Going_outside  \\\n",
       "0         -0.022156                 0.657346      -0.020620   \n",
       "1         -0.364742                -1.969365      -2.041578   \n",
       "2         -0.022156                -0.093143       0.989859   \n",
       "3         -0.022156                -0.468387      -0.020620   \n",
       "4          2.033358                -1.594120      -1.031099   \n",
       "\n",
       "   Friends_circle_size  Post_frequency  Stage_fear_No  Stage_fear_Yes  \\\n",
       "0            -0.486882        0.006002            1.0             0.0   \n",
       "1            -0.730698       -1.433314            0.0             1.0   \n",
       "2             1.707463        1.445319            1.0             0.0   \n",
       "3            -0.730698        0.365832            1.0             0.0   \n",
       "4            -1.705963       -1.433314            0.0             1.0   \n",
       "\n",
       "   Drained_after_socializing_No  Drained_after_socializing_Yes  \n",
       "0                           1.0                            0.0  \n",
       "1                           0.0                            1.0  \n",
       "2                           1.0                            0.0  \n",
       "3                           1.0                            0.0  \n",
       "4                           0.0                            1.0  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_processed_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "649ca6c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.881539Z",
     "iopub.status.busy": "2025-07-05T04:02:39.881189Z",
     "iopub.status.idle": "2025-07-05T04:02:39.886072Z",
     "shell.execute_reply": "2025-07-05T04:02:39.884982Z"
    },
    "papermill": {
     "duration": 0.017965,
     "end_time": "2025-07-05T04:02:39.888234",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.870269",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = train_processed_df\n",
    "y_train = train['Personality']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "88eb34b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.909179Z",
     "iopub.status.busy": "2025-07-05T04:02:39.908835Z",
     "iopub.status.idle": "2025-07-05T04:02:39.913276Z",
     "shell.execute_reply": "2025-07-05T04:02:39.912316Z"
    },
    "papermill": {
     "duration": 0.016493,
     "end_time": "2025-07-05T04:02:39.914836",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.898343",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = RandomForestClassifier(random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5215b5b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:39.936533Z",
     "iopub.status.busy": "2025-07-05T04:02:39.936214Z",
     "iopub.status.idle": "2025-07-05T04:02:41.600064Z",
     "shell.execute_reply": "2025-07-05T04:02:41.599017Z"
    },
    "papermill": {
     "duration": 1.676682,
     "end_time": "2025-07-05T04:02:41.601900",
     "exception": false,
     "start_time": "2025-07-05T04:02:39.925218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(random_state=42)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b36d9fcb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:41.625443Z",
     "iopub.status.busy": "2025-07-05T04:02:41.625144Z",
     "iopub.status.idle": "2025-07-05T04:02:42.035013Z",
     "shell.execute_reply": "2025-07-05T04:02:42.033585Z"
    },
    "papermill": {
     "duration": 0.423467,
     "end_time": "2025-07-05T04:02:42.036871",
     "exception": false,
     "start_time": "2025-07-05T04:02:41.613404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred_train = model.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "04011f93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:42.059053Z",
     "iopub.status.busy": "2025-07-05T04:02:42.058592Z",
     "iopub.status.idle": "2025-07-05T04:02:42.559174Z",
     "shell.execute_reply": "2025-07-05T04:02:42.557746Z"
    },
    "papermill": {
     "duration": 0.514115,
     "end_time": "2025-07-05T04:02:42.561271",
     "exception": false,
     "start_time": "2025-07-05T04:02:42.047156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "accuracy = accuracy_score(y_train, y_pred_train)\n",
    "precision = precision_score(y_train, y_pred_train, average='weighted')\n",
    "recall = recall_score(y_train, y_pred_train, average='weighted')\n",
    "f1 = f1_score(y_train, y_pred_train, average='weighted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6645afe0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-05T04:02:42.586403Z",
     "iopub.status.busy": "2025-07-05T04:02:42.586023Z",
     "iopub.status.idle": "2025-07-05T04:02:42.751139Z",
     "shell.execute_reply": "2025-07-05T04:02:42.749996Z"
    },
    "papermill": {
     "duration": 0.180459,
     "end_time": "2025-07-05T04:02:42.753334",
     "exception": false,
     "start_time": "2025-07-05T04:02:42.572875",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Personality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>18524</td>\n",
       "      <td>Extrovert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18525</td>\n",
       "      <td>Introvert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18526</td>\n",
       "      <td>Extrovert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18527</td>\n",
       "      <td>Extrovert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>18528</td>\n",
       "      <td>Introvert</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id Personality\n",
       "0  18524   Extrovert\n",
       "1  18525   Introvert\n",
       "2  18526   Extrovert\n",
       "3  18527   Extrovert\n",
       "4  18528   Introvert"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_predictions = model.predict(test_processed_df)\n",
    "submission_df = pd.DataFrame({'id': test['id'], 'Personality': test_predictions})\n",
    "submission_df.to_csv('submission.csv', index=False)\n",
    "display(submission_df.head())"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 12738969,
     "sourceId": 91718,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 17.155559,
   "end_time": "2025-07-05T04:02:43.487067",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-05T04:02:26.331508",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
