{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91718,"databundleVersionId":12738969,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom itertools import permutations\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import StratifiedKFold, train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\ntrain = pd.read_csv(\"/kaggle/input/playground-series-s5e7/train.csv\")\ntest  = pd.read_csv(\"/kaggle/input/playground-series-s5e7/test.csv\")\n\nprint(\"Train shape :\", train.shape)\nprint(\"Test  shape :\", test.shape)\ndisplay(train.head())\ndisplay(test.head())","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"üîç Missing Values in Train Dataset:\")\ndisplay(train.isnull().sum().to_frame(name='Missing Values').query('`Missing Values` > 0').sort_values(by='Missing Values', ascending=False))\n\nprint(\"\\nüîç Missing Values in Test Dataset:\")\ndisplay(test.isnull().sum().to_frame(name='Missing Values').query('`Missing Values` > 0').sort_values(by='Missing Values', ascending=False))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def preprocessing(df):\n    df = df.copy()\n\n    df.drop(columns=['id'], inplace=True)\n    df.columns = df.columns.str.lower().str.replace(' ', '_')\n\n    df['stage_fear'] = df['stage_fear'].fillna('unknown')\n    df['drained_after_socializing'] = df['drained_after_socializing'].fillna('unknown')\n\n    num_col = df.select_dtypes(include='number').columns\n    for col in num_col:\n        df[col] = df[col].fillna(df[col].mean())\n\n    # Target Encoding\n    target_encoder = None\n    if 'personality' in df.columns:\n        target_encoder = LabelEncoder()\n        df['personality'] = target_encoder.fit_transform(df['personality'])\n\n    cat_col = df.select_dtypes(include='object').columns\n    for col in cat_col:\n        le = LabelEncoder()\n        df[col] = le.fit_transform(df[col].astype(str))\n\n    return df, target_encoder","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train, target_encoder = preprocessing(train)\nX_test_df, _ = preprocessing(test)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X = X_train.drop(columns=['personality'])\ny = X_train['personality']","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def generate_categorical_permutations(df, cols, max_comb_len=None):\n    df = df.copy()\n\n    for r in range(2, max_comb_len + 1):\n        for comb in permutations(cols, r):\n            new_col_name = '__'.join(comb)\n            df[new_col_name] = df[list(comb)].astype(str).agg('_'.join, axis=1)\n\n    return df\n    \nX = generate_categorical_permutations(X, cols=X.columns, max_comb_len=3)\nX_test_df = generate_categorical_permutations(X_test_df, cols=X_test_df.columns, max_comb_len=3)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def prepare_modeling(train):\n        \n    cat = train.select_dtypes(include='object').columns\n    label_encod = LabelEncoder()\n    for col in cat:\n      train[col]= label_encod.fit_transform(train[col])\n\n    \n    from sklearn.preprocessing import StandardScaler\n    scaler = StandardScaler()\n    X_train_scaled = scaler.fit_transform(train)\n    train = pd.DataFrame(X_train_scaled, columns=train.columns)\n\n    return train","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X = prepare_modeling(X)\nX_test_df = prepare_modeling(X_test_df)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def train_Kfold(X, y, n_splits=10):\n\n  skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n\n  accuracies = []\n  models = []\n\n  for fold, (train_idx, val_idx) in enumerate(skf.split(X, y)):\n    print(f\"Fold {fold + 1}\")\n\n    X_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n    X_val, y_val = X.iloc[val_idx], y.iloc[val_idx]\n\n    model = LogisticRegression()\n    model.fit(X_train, y_train)\n\n    y_pred = model.predict(X_val)\n    acc= accuracy_score(y_val, y_pred)\n    accuracies.append(acc)\n    models.append(model)\n\n    print(f\" Accuracy: {acc:.4f}\")\n\n  print(f\"Average Accuracy: {np.mean(accuracies):.4f}\")\n\n  return models","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"models = train_Kfold(X, y)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.manifold import TSNE\n\ntsne = TSNE(n_components=2, perplexity=30, random_state=42, n_iter=1000, learning_rate='auto')\n\n# –ü–æ–ª—É—á–∞–µ–º –¥–≤—É–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ\nX_tsne = tsne.fit_transform(X_train.drop('personality', axis=1))\n\n# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è\nplt.figure(figsize=(10, 6))\nsns.scatterplot(x=X_tsne[:, 0], y=X_tsne[:, 1], hue=y, palette=\"tab10\", s=60)\nplt.title(\"t-SNE Visualization\")\nplt.xlabel(\"t-SNE 1\")\nplt.ylabel(\"t-SNE 2\")\nplt.legend(title=\"–ö–ª–∞—Å—Å\", bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2, stratify=y)\n\n#Getting the number of classes\nnum_classes = len(np.unique(y_test))\n\npred_probs = np.zeros((X_test.shape[0], num_classes))\nfor model in models:\n    pred_probs += model.predict_proba(X_test) / len(models)\n\n# final prediction\nfinal_preds = np.argmax(pred_probs, axis=1)\n\n# 6. Labels (class names) for visualization\nclass_names = target_encoder.classes_\n\n\nprint(\"üìã Classification Report:\")\nprint(classification_report(y_test, final_preds, target_names=class_names))\n\ncm = confusion_matrix(y_test, final_preds)\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n            xticklabels=class_names, yticklabels=class_names)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def submission(X_test, models):\n\n  num_classes = len(np.unique(y))\n  pred_probs = np.zeros((X_test.shape[0], num_classes))\n\n  for model in models:\n    pred_probs += model.predict_proba(X_test) / len(models)\n\n  final_preds = np.argmax(pred_probs, axis=1)\n  final_lavels = target_encoder.inverse_transform(final_preds)\n\n  submission = pd.DataFrame({'id': test['id'],\n                             'personality': final_lavels})\n  submission.to_csv('submission.csv', index=False)\n\n  return submission","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"submission =  submission(X_test_df, models)\nsubmission.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}